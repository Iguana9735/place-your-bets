// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Place-your-bets service
 * An API intended to be consumed by the place-your-bets frontend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetInfo200Response,
  SubmitGuessRequest,
} from '../models/index';
import {
    GetInfo200ResponseFromJSON,
    GetInfo200ResponseToJSON,
    SubmitGuessRequestFromJSON,
    SubmitGuessRequestToJSON,
} from '../models/index';

export interface GetInfoRequest {
    authorization: string;
}

export interface SubmitGuessOperationRequest {
    authorization: string;
    submitGuessRequest: SubmitGuessRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get all the info the frontend needs in one call
     */
    async getInfoRaw(requestParameters: GetInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInfo200Response>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all the info the frontend needs in one call
     */
    async getInfo(requestParameters: GetInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInfo200Response> {
        const response = await this.getInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Just an endpoint to see that the backend is running. Always returns 200
     */
    async healthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Just an endpoint to see that the backend is running. Always returns 200
     */
    async health(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.healthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Submit a guess
     */
    async submitGuessRaw(requestParameters: SubmitGuessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling submitGuess().'
            );
        }

        if (requestParameters['submitGuessRequest'] == null) {
            throw new runtime.RequiredError(
                'submitGuessRequest',
                'Required parameter "submitGuessRequest" was null or undefined when calling submitGuess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/submit-guess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitGuessRequestToJSON(requestParameters['submitGuessRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submit a guess
     */
    async submitGuess(requestParameters: SubmitGuessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.submitGuessRaw(requestParameters, initOverrides);
    }

}
